---
description: General Coding.
globs:
    - "**/*"
---
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming

- Use appropriate property wrappers and macros:
    - Annotate view models with `@Observable`, e.g. `@Observable final class MyModel`.
    - Do not use @State in the SwiftUI View for view model observation. Instead, use `let model: MyModel`.
    - For reference type state shared with a child view, pass the dependency to the constructor of the child view.
    - For value type state shared with a child view, use SwiftUI bindings if and only if the child needs write access to the state.
    - For value type state shared with a child view, pass the value if the child view only needs read access to the state.
    - Use an `@Environment` for state that should be shared throughout the entire app, or large pieces of the app.
    - Use `@State` only for local state that is managed by the view itself.

- Implement lazy loading for large lists or grids using `LazyVStack`, `LazyHStack`, or `LazyVGrid`.
- Optimize ForEach loops by using stable identifiers.

- Use `@main` and `App` protocol for the app's entry point.
- Implement `Scene`s for managing app structure.
- Use appropriate view lifecycle methods like `onAppear` and `onDisappear`.

- Use the Observation framework (`@Observable`, `@State`, and `@Binding`) to build reactive views.
- Implement proper error handling and propagation.

- Use `@Binding` for two-way data flow between parent and child views.
- Implement custom `PreferenceKey`s for child-to-parent communication.
- Utilize `@Environment` for dependency injection.

- Before declaring a new struct or class, make sure it doesn't already exist in the project.

- Don't create extra modules or packages. Keep all files in the same target and project.